package nuanliu.com.modao.ui.activity;

import android.os.Bundle;
import android.os.Handler;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.View;
import android.widget.LinearLayout;

import com.classic.common.MultipleStatusView;

import java.util.ArrayList;
import java.util.List;

import butterknife.BindView;
import nuanliu.com.modao.R;
import nuanliu.com.modao.base.BaseActivity;
import nuanliu.com.modao.bean.PayRecordItemBean;
import nuanliu.com.modao.bean.PayRecordListBean;
import nuanliu.com.modao.network.ServiceFactory;
import nuanliu.com.modao.ui.adapter.PayRecordListAdapter;
import nuanliu.com.modao.utils.SpUtil;
import nuanliu.com.modao.widget.refreshview.XRefreshView;
import nuanliu.com.modao.widget.refreshview.XRefreshViewFooter;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

/***
 * 缴费记录列表
 */

public class PayRecordListActivity extends BaseActivity implements XRefreshView.XRefreshViewListener {

    @BindView(R.id.rv_recyclerview)
    RecyclerView mRvRecyclerview;
    @BindView(R.id.content_view)
    LinearLayout mContentView;
    @BindView(R.id.multiplestatusview_all)
    MultipleStatusView mMultiplestatusviewAll;
    @BindView(R.id.xrefreshview)
    XRefreshView mXrefreshview;

    private List<PayRecordItemBean> mDatas = new ArrayList<>();
    private PayRecordListAdapter payRecordListAdapter;

    private int mStartPage = 1;
    private int mPagesize = 10;

    private boolean menableLoadmore = false;

    private int mloadmorecount = 1;

    private boolean isFirst = true;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        initView();
        initData();
    }

    @Override
    protected int getLayoutId() {
        return R.layout.activity_pay_record_list;
    }

    private void initView() {
        getToolBar().setTitle("缴费记录");
        mXrefreshview.setPinnedTime(1000);
        mXrefreshview.setMoveForHorizontal(true);
        mXrefreshview.setPullLoadEnable(true);
        mXrefreshview.setAutoLoadMore(false);

        mXrefreshview.enableReleaseToLoadMore(true);
        mXrefreshview.enableRecyclerViewPullUp(true);
        mXrefreshview.enablePullUpWhenLoadCompleted(true);
        mXrefreshview.setXRefreshViewListener(this);

        payRecordListAdapter = new PayRecordListAdapter(this, mDatas);
        payRecordListAdapter.setCustomLoadMoreView(new XRefreshViewFooter(this));
        mRvRecyclerview.setLayoutManager(new LinearLayoutManager(this));
        mRvRecyclerview.setAdapter(payRecordListAdapter);

        DefaultItemAnimator animator = new DefaultItemAnimator();
        //设置动画时间
        animator.setAddDuration(300);
        animator.setRemoveDuration(300);
        mRvRecyclerview.setItemAnimator(animator);
    }

    private void initData() {

        mMultiplestatusviewAll.setOnRetryClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                getPayRecordList(SpUtil.getUser().getUsername(), SpUtil.getUser().getResidents(), mStartPage, mPagesize, true);
            }
        });

        getPayRecordList(SpUtil.getUser().getUsername(), SpUtil.getUser().getResidents(), mStartPage, mPagesize, true);
    }

    private void getPayRecordList(String userName, String resident, int startPage, final int pageSize, final boolean isrefresh) {
        showLoading("加载中");
        mMultiplestatusviewAll.showContent();
        ServiceFactory
                .getApis()
                .paymentList(userName, resident, startPage, pageSize)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .compose(this.<PayRecordListBean>bindToLifecycle())
                .subscribe(new Subscriber<PayRecordListBean>() {
                    @Override
                    public void onCompleted() {

                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onNext(PayRecordListBean payRecordListBean) {
                        if (payRecordListBean.getStatus() == 1) {
                            List<PayRecordItemBean> list = new ArrayList<>();
                            if (payRecordListBean.getBody() != null && payRecordListBean.getBody().getTotalList() != null) {
                                for (PayRecordListBean.BodyBean.TotalList totalList : payRecordListBean.getBody().getTotalList()) {
                                    list.add(new PayRecordItemBean(totalList.getAmount_t(), totalList.getYear_s(), PayRecordListAdapter.YEAR_AMOUNT));

                                    if (totalList.getList() != null) {
                                        for (PayRecordListBean.BodyBean.TotalList.ListBean listBean : totalList.getList()) {
                                            list.add(new PayRecordItemBean(listBean.getId(), listBean.getCommunityName(), listBean.getAmount(), listBean.getTime(),
                                                    listBean.getTitle(), listBean.getPayMethod(), listBean.getBizId(), listBean.getHouseholder(), listBean.getAddre(), PayRecordListAdapter.BILL_DETAIL));
                                        }
                                    }
                                }
                            }
                            refreshViewByData(list, isrefresh);
                        } else {
                            mMultiplestatusviewAll.showEmpty();
                        }
                    }
                });
    }

    private void refreshViewByData(List<PayRecordItemBean> list, boolean isrefresh) {
        mDatas.clear();
        if (list.size() == 0) {

            mXrefreshview.setLoadComplete(true);

            if (isrefresh) {
                mMultiplestatusviewAll.showEmpty();
            }

            return;
        }
        //判断是否可以加载更多处理
        if (list.size() < mPagesize) {
            menableLoadmore = false;
        } else {
            menableLoadmore = true;
        }
        if (isrefresh) {
            mDatas.clear();
            payRecordListAdapter.addData(list);
            payRecordListAdapter.notifyDataSetChanged();
        } else {
            payRecordListAdapter.addData(list);
            payRecordListAdapter.notifyDataSetChanged();
            new Handler().postDelayed(new Runnable() {
                public void run() {
                    if (menableLoadmore) {

                        mXrefreshview.stopLoadMore(true);

                    } else {
                        mXrefreshview.setLoadComplete(true);
                    }
                }
            }, 500);

        }
    }

    @Override
    public void onResume() {
        super.onResume();
        if (!isFirst) {
            onRefresh(true);
        }
        isFirst = false;
    }

    @Override
    public void onRefresh() {

    }

    @Override
    public void onRefresh(boolean isPullDown) {
        mXrefreshview.setLoadComplete(false);
        mloadmorecount = 1;
        menableLoadmore = true;
        mStartPage = 1;
        getPayRecordList(SpUtil.getUser().getUsername(), SpUtil.getUser().getResidents(), mStartPage, mPagesize, true);
        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                mXrefreshview.stopRefresh();
            }
        }, 510);
    }

    @Override
    public void onLoadMore(boolean isSilence) {
        if (menableLoadmore) {
            mStartPage = mloadmorecount * mPagesize;
            new Handler().postDelayed(new Runnable() {
                public void run() {
                    getPayRecordList(SpUtil.getUser().getUsername(), SpUtil.getUser().getResidents(), mStartPage, mPagesize, false);
                }
            }, 500);
            mloadmorecount++;
        } else {
            new Handler().postDelayed(new Runnable() {
                public void run() {
                    mXrefreshview.setLoadComplete(true);
                }
            }, 500);
        }
    }

    @Override
    public void onRelease(float direction) {

    }

    @Override
    public void onHeaderMove(double headerMovePercent, int offsetY) {

    }
}
