package com.nuanliu.finme.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.text.TextUtils;

import com.google.gson.Gson;
import com.nuanliu.finme.BuildConfig;
import com.nuanliu.finme.bean.CollectBean;
import com.nuanliu.finme.bean.Permissions;
import com.nuanliu.finme.bean.User;
import com.nuanliu.finme.global.App;

import java.util.LinkedHashMap;


/**
 * Created by Deity on 2016/12/12.
 */

public class SpUtil {

    public static  final String FILENAME="FinMe";

    private static SharedPreferences preferences;

    public static SharedPreferences getSharedPreferences() {
        if (preferences == null){
            preferences=App.getContext().getSharedPreferences(FILENAME,Context.MODE_PRIVATE);
            return preferences;
        }
        return preferences;
    }

    public static void saveString(String key, String value)
    {
        SharedPreferences.Editor edit = getSharedPreferences().edit();
        edit.putString(key, value);
        edit.commit();
    }

    //获取一个String值
    public static String getString(Context context, String key)
    {
        return  getSharedPreferences().getString(FILENAME, "");
    }
    public static void saveLoginState(Boolean islogin) {

        SharedPreferences.Editor edit = getSharedPreferences().edit();
        edit.putBoolean("logined", islogin);
        edit.commit();
    }
    public static boolean isLogin() {

        return getSharedPreferences().getBoolean("logined",false);
    }

    public static boolean saveIsUseGuide(int versionCode) {
        SharedPreferences.Editor edit = getSharedPreferences().edit();
        edit.putInt("isUseGuide", versionCode);
        boolean commit = edit.commit();
        return commit;
    }
    public static boolean isUseGuide() {
        return BuildConfig.VERSION_CODE != getSharedPreferences().getInt("isUseGuide", -1);
    }

//    保存项目id
    public static void  saveProjectId(String projectid){
        SharedPreferences.Editor edit = getSharedPreferences().edit();
        edit.putString("ProjectId",projectid);
        edit.commit();
    }
//    获取项目id
    public static String getProjectId(){
        return getSharedPreferences().getString("ProjectId","");
    }
//    保存项目名字
    public static void saveProjectName(String projectname) {
        projectname=StringUtil.getProjectNameForDZ(projectname);
        SharedPreferences.Editor edit = getSharedPreferences().edit();
        edit.putString("projectname",projectname);
        edit.commit();

    }
//    获取项目名
    public static String getProjectName(){

        return getSharedPreferences().getString("projectname","");
    }

    public static void saveProjectArea(String projectname) {
        projectname=StringUtil.getProjectNameForDZ(projectname);
        SharedPreferences.Editor edit = getSharedPreferences().edit();
        edit.putString("projectarea",projectname);
        edit.commit();

    }
    //    获取项目面积
    public static String getProjectArea(){

        return getSharedPreferences().getString("projectarea","");
    }

    public static void saveMaintainGroupId(String projectname) {
        SharedPreferences.Editor edit = getSharedPreferences().edit();
        edit.putString("maintaingroupid",projectname);
        edit.commit();

    }
    //    获取项目维修项目分组ID
    public static String getMaintainGroupId(){

        return getSharedPreferences().getString("maintaingroupid","");
    }

    //保存用户
    public static boolean saveUser(User user) {
        String s = new Gson().toJson(user);
        SharedPreferences.Editor editor = getSharedPreferences().edit();
        editor.putString("user",s);
        return editor.commit();
    }

    public static boolean removeUser() {
        SharedPreferences.Editor editor = getSharedPreferences().edit();
        editor.remove("user");
        return editor.commit();
    }

    public static boolean containsUser() {
        return getSharedPreferences().contains("user");
    }

    public static User getUser() {
        String s = getSharedPreferences().getString("user", "");
        if (!TextUtils.isEmpty(s)) {
            return new Gson().fromJson(s, User.class);
        } else {
            return new User("","");
        }
    }
    public static boolean savaCollect(CollectBean collectBean) {
        String s = new Gson().toJson(collectBean);
        SharedPreferences.Editor editor = getSharedPreferences().edit();
        editor.putString("Collect",s);
        return editor.commit();
    }
    public static CollectBean getCollect() {
        String s = getSharedPreferences().getString("Collect", "");
        if (!TextUtils.isEmpty(s)) {
            return new Gson().fromJson(s, CollectBean.class);
        } else {
            return new CollectBean(new LinkedHashMap<String, Boolean>());
        }
    }
    public static boolean savaMeterCollect(CollectBean collectBean) {
        String s = new Gson().toJson(collectBean);
        SharedPreferences.Editor editor = getSharedPreferences().edit();
        editor.putString("Metercollect",s);
        return editor.commit();
    }
    public static CollectBean getMeterCollect() {
        String s = getSharedPreferences().getString("Collect", "");
        if (!TextUtils.isEmpty(s)) {
            return new Gson().fromJson(s, CollectBean.class);
        } else {
            return new CollectBean(new LinkedHashMap<String, Boolean>());
        }
    }

    public static boolean savaPermission(Permissions permissions) {
        String s = new Gson().toJson(permissions);
        SharedPreferences.Editor editor = getSharedPreferences().edit();
        editor.putString("Permission_list",s);
        return editor.commit();
    }

    public static Permissions getPermissionList() {
        String s = getSharedPreferences().getString("Permission_list", "");
        if (!TextUtils.isEmpty(s)) {
            return new Gson().fromJson(s, Permissions.class);
        } else {
            return null;
        }
    }

    public static void setBindDeviceState(Boolean state) {
        SharedPreferences.Editor edit = getSharedPreferences().edit();
        edit.putBoolean("devicestate", state);
        edit.commit();
    }
    public static boolean getBindDeviceState() {

        return getSharedPreferences().getBoolean("devicestate",false);
    }



}
