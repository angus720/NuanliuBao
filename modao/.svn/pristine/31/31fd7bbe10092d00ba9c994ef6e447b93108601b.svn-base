package nuanliu.com.modao.utils;

import android.app.Activity;
import android.content.Intent;
import android.net.Uri;
import android.os.Build;
import android.support.v4.content.FileProvider;

import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

/**
 * @创建者 SoleJoke
 * @创建时间 on 2017/3/23
 * @描述
 * @更新者 　$Author
 * @更新时间 　2017/3/23
 * @更新描述　　${ToDo}
 */

public class UpdateUtil {
    /**
     *
     * @param context
     * @param file , int INSTALLREQUEST
     * @param
     */
    public static void installAPK(Activity context, File file) {
        //创建一个意图
        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        //版本在7.0以上是不能直接通过uri访问的
        if (Build.VERSION.SDK_INT >= 24) {

            // 由于没有在Activity环境下启动Activity,设置下面的标签

            //参数1 上下文, 参数2 Provider主机地址 和配置文件中保持一致   参数3  共享的文件
            Uri apkUri = FileProvider.getUriForFile(context, "com.nuanliu.finme.download", file);
            //添加这一句表示对目标应用临时授权该Uri所代表的文件
            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);

            intent.setDataAndType(apkUri, "application/vnd.android.package-archive");

        } else {

            intent.addCategory("android.intent.category.DEFAULT");
            intent.setDataAndType(Uri.fromFile(file),
                    "application/vnd.android.package-archive");
        }
        //开启intent
        // startActivity(intent_install);
        context.startActivity(intent);

    }

    /**
     * @return返回一个response对象
     * @throws IOException
     */
    public static Response getResponse(String url)
            throws IOException {

        OkHttpClient okHttpClient = new OkHttpClient
                .Builder()
                .connectTimeout(5, TimeUnit.SECONDS)
                .build();
        //            client.connectTimeoutMillis();
        //执行
        Request request = new Request.Builder().url(url).build();
        Response response = okHttpClient.newCall(request).execute();
        return response;
    }

    /**
     * 写入文件
     * @param inputStream
     * @throws IOException
     */
    public static void writeFile(InputStream inputStream, File downFile)
            throws IOException {

        //通过输出流去写
        FileOutputStream fileOutputStream = new FileOutputStream(downFile,true);

        //定义缓存
        byte[] buffer = new byte[1024];

        //定义读取的长度
        int len = -1;

        //循环的去读写
        while ((len = inputStream.read(buffer)) != -1) {
            //写入文件
            fileOutputStream.write(buffer, 0, len);

        }
        closeStream(inputStream);
        closeStream(fileOutputStream);
    }

    /**
     * 关闭流的方法
     */
    public static void closeStream(Closeable stream) {
        if (stream != null) {
            try {
                stream.close();
            }
            catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }

    }
}
