package nuanliu.com.modao.base;

import android.content.Context;
import android.content.pm.ActivityInfo;
import android.os.Bundle;
import android.os.Handler;
import android.support.annotation.Nullable;
import android.support.design.widget.AppBarLayout;
import android.util.AttributeSet;
import android.view.View;

import com.trello.rxlifecycle.components.support.RxAppCompatActivity;
import com.zhy.autolayout.AutoFrameLayout;
import com.zhy.autolayout.AutoLinearLayout;
import com.zhy.autolayout.AutoRelativeLayout;

import butterknife.ButterKnife;
import nuanliu.com.modao.R;
import nuanliu.com.modao.ui.dialog.LoadingDialog;
import nuanliu.com.modao.widget.NXToolBar;

/**
 * Created by Deity on 2016/12/12.
 */

public abstract class BaseActivity extends RxAppCompatActivity {

    private static final String LAYOUT_LINEARLAYOUT = "LinearLayout";
    private static final String LAYOUT_FRAMELAYOUT = "FrameLayout";
    private static final String LAYOUT_RELATIVELAYOUT = "RelativeLayout";

    private NXToolBar nxToolBar;
    private LoadingDialog mDialog;
    private boolean isOrNotShowLoadinng = true;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        beforeSetContentView();
//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
//                getWindow().requestFeature(Window.FEATURE_CONTENT_TRANSITIONS);
//                Transition explode = TransitionInflater.from(this).inflateTransition(R.transition.explode);
//                Transition fade = TransitionInflater.from(this).inflateTransition(R.transition.fade);
//                Transition slide = TransitionInflater.from(this).inflateTransition(R.transition.slide);
//                //退出时使用
//                getWindow().setExitTransition(fade);
//                //第一次进入时使用

//                getWindow().setEnterTransition(slide);
//                //再次进入时使用
//                //getWindow().setReenterTransition(explode);
//            }
        // Hide both the navigation bar and the status bar.
        // SYSTEM_UI_FLAG_FULLSCREEN is only available on Android 4.1 and higher, but as
        // a general rule, you should design your app to hide the status bar whenever you
        // hide the navigation bar.
//        if (Build.VERSION.SDK_INT > 11 && Build.VERSION.SDK_INT < 19) { // lower api
//            View v = this.getWindow().getDecorView();
//            v.setSystemUiVisibility(View.GONE);
//        } else if (Build.VERSION.SDK_INT >= 19) {
//            //for new api versions.
//            View decorView = getWindow().getDecorView();
//            int uiOptions = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
//                    | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY | View.SYSTEM_UI_FLAG_FULLSCREEN;
//            decorView.setSystemUiVisibility(uiOptions);
//        }
        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        setContentView(getLayoutId());
        ButterKnife.bind(this);
        mDialog = new LoadingDialog(this);
        AppBarLayout appBarLayout = (AppBarLayout) findViewById(R.id.appBarLayout);
        if (appBarLayout == null) {
            throw new RuntimeException("缺少AppBarLayout");
        }
        nxToolBar = new NXToolBar(this, appBarLayout);
    }


    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);

//        View mDecorView = getWindow().getDecorView();
//        mDecorView.setSystemUiVisibility( View.SYSTEM_UI_FLAG_LAYOUT_STABLE
//                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
//                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
//                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION // hide nav bar
//                 | View.SYSTEM_UI_FLAG_FULLSCREEN // hide status bar
//                 | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY );

    }

    @Override
    public View onCreateView(String name, Context context, AttributeSet attrs) {
        View view = null;
        if (name.equals(LAYOUT_FRAMELAYOUT)) {
            view = new AutoFrameLayout(context, attrs);
        }

        if (name.equals(LAYOUT_LINEARLAYOUT)) {
            view = new AutoLinearLayout(context, attrs);
        }

        if (name.equals(LAYOUT_RELATIVELAYOUT)) {
            view = new AutoRelativeLayout(context, attrs);
        }

        if (view != null) return view;

        return super.onCreateView(name, context, attrs);
    }

    public void showLoading() {
        if (isOrNotShowLoadinng)
            mDialog.show();
    }

    public void beforeSetContentView() {


    }


    public void dismissLoading() {
        if (mDialog != null && mDialog.isShowing()) {
            mDialog.dismiss();
        }
    }

    public void showLoading(String string) {
        if (isOrNotShowLoadinng)
            mDialog.show(string);
    }

    public void setVisiablleLoading(boolean show) {
        this.isOrNotShowLoadinng = show;
    }

    protected abstract int getLayoutId();

    public NXToolBar getToolBar() {
        return nxToolBar;
    }


    public void imitateLoading(long delay, String loadingtitle) {
        showLoading(loadingtitle);
        new Handler().postDelayed(new Runnable() {
            public void run() {
                dismissLoading();
            }
        }, delay);
    }

    @Override
    protected void onDestroy() {
        if(mDialog != null) {
            mDialog.dismiss();
        }
        super.onDestroy();
    }
}
