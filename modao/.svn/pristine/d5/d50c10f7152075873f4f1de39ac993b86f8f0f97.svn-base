package nuanliu.com.modao.ui.activity;

import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Log;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.concurrent.TimeUnit;

import butterknife.BindView;
import butterknife.OnClick;
import nuanliu.com.modao.R;
import nuanliu.com.modao.base.BaseActivity;
import nuanliu.com.modao.global.App;
import nuanliu.com.modao.network.Apis;
import nuanliu.com.modao.network.upanddownload.DownloadProgressHandler;
import nuanliu.com.modao.network.upanddownload.ProgressHelper;
import nuanliu.com.modao.utils.ArithUtils;
import nuanliu.com.modao.utils.URLUtils;
import nuanliu.com.modao.utils.UpdateUtil;
import okhttp3.OkHttpClient;
import okhttp3.ResponseBody;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava.RxJavaCallAdapterFactory;
import rx.Subscriber;
import rx.schedulers.Schedulers;

/**
 * 强更新页面，当本地版本号和服务器端版本号不一致的时候 ，进行强制更新处理
 */

public class ForcedUpdatingActivity extends BaseActivity {

    @BindView(R.id.btn_rightnow_update)
    TextView mBtnRightnowUpdate;
    @BindView(R.id.iv_logo)
    ImageView mIvLogo;
    @BindView(R.id.tv_newversion)
    TextView mTvNewversion;
    @BindView(R.id.tv_updata_slogan)
    TextView mTvUpdataSlogan;
    private PackageInfo mInfo;

    //服务器下载完成的标志
    private String mNewversion;

    private boolean mDownFinish = false;
    private long mBytesRead;
    private long mContentLength;
    private boolean mIsfirst = true;
    private Apis mRetrofit;

    @Override
    protected int getLayoutId() {
        return R.layout.activity_forced_updating;
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        initIntentData();
        initView();
    }

    private void initIntentData() {
        if (getIntent().hasExtra("new_version")) {
            mNewversion = getIntent().getStringExtra("new_version");
            mTvNewversion.setText("Modao" + mNewversion.toUpperCase());
        }
    }

    private void initView() {
        getToolBar().setDisplayHomeAsUpEnabled(false).setTitle("版本更新");

        PackageManager manager = getPackageManager();

        try {
            mInfo = manager.getPackageInfo(this.getPackageName(), 0);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
    }

    @OnClick(R.id.btn_rightnow_update)
    public void onClick() {
//        startActivity(new Intent(this,AboutFinmeActivity.class));
//        showUpdateDialog();

        if (TextUtils.equals(Environment.getExternalStorageState(), Environment.MEDIA_MOUNTED)) {
            //可读可写
            File storageDirectory = getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
            //创建一个文件
            File downFile = new File(storageDirectory, "modao_apk_update.apk");

            if (downFile.exists()) {
                downFile.delete();
            }
        }
        showLoading("更新下载中");
        startDown(mNewversion);
    }

    @Override
    public void onBackPressed() {

    }

    private void startDown(String mNewestVersion) {
        //
        Retrofit.Builder retrofitBuilder = new Retrofit.Builder()
                //                .addConverterFactory(GsonConverterFactory.create())
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .baseUrl(URLUtils.APK_DOWN_BASW);
        OkHttpClient.Builder builder = ProgressHelper.addProgress(null);
        //        OkHttpClient.Builder builder1 = new OkHttpClient().newBuilder();

        mRetrofit = retrofitBuilder
                .client(builder.connectTimeout(30, TimeUnit.SECONDS)
                        .readTimeout(1, TimeUnit.MINUTES)
                        .writeTimeout(1, TimeUnit.MINUTES).build())
                .build().create(Apis.class);

        ProgressHelper.setProgressHandler(new DownloadProgressHandler() {
            @Override
            protected void onProgress(long bytesRead, long contentLength, boolean done) {
                if (mIsfirst) {
                    mContentLength = contentLength;
                    mIsfirst = false;
                }
                showLoading("拼命加载中" + (int) (ArithUtils.div(bytesRead, contentLength, 2) * 100) + "%");
                mBytesRead = bytesRead;

                if (done) {
                    mDownFinish = true;
                    dismissLoading();
                }
            }
        });

        getDownApk(mRetrofit, "");

    }

    private void getDownApk(final Apis apis, String range) {
        apis.download(mNewversion, range)
                .subscribeOn(Schedulers.io())
                .observeOn(Schedulers.io())
                .subscribe(new Subscriber<ResponseBody>() {
                    @Override
                    public void onCompleted() {
                        if (!mDownFinish) {
                            Log.d("ForcedUpdatingActivity", "completed 重新下载");
                        }
                        dismissLoading();
                        Log.d("ForcedUpdatingActivity", "oncompleted");
                    }

                    @Override
                    public void onError(Throwable e) {
                        if (!mDownFinish) {
                            mDownFinish = false;
                            getDownApk(mRetrofit, "bytes=" + 0 + "-" + (mContentLength));
                            Log.d("ForcedUpdatingActivity", "error 重新下载");
                        }
                        Log.d("ForcedUpdatingActivity", e.getMessage());
                    }

                    @Override
                    public void onNext(ResponseBody responseBodyResponse) {
                        try {
                            //得到我们的response对象
                            //得到请求内容
                            InputStream inputStream = responseBodyResponse.byteStream();
                            // 写入sd卡
                            // 写入的sd状态
                            // 判断当前的状态是否可写可读SD
                            if (TextUtils.equals(Environment.getExternalStorageState(), Environment.MEDIA_MOUNTED)) {
                                //可读可写
                                File storageDirectory = getExternalFilesDir(Environment.DIRECTORY_DOWNLOADS);
                                //创建一个文件
                                File downFile = new File(storageDirectory, "modao_apk_update.apk");
                                //写入文件
                                dismissLoading();
                                UpdateUtil.writeFile(inputStream, downFile);

                                UpdateUtil.installAPK(ForcedUpdatingActivity.this, downFile);
                                Log.d("ForcedUpdatingActivity", "下载完成finish");

                            } else {
                                dismissLoading();
                                Toast.makeText(App.getContext(), "请检查您的手机存储空间,尝试重新下载", Toast.LENGTH_SHORT).show();
                            }

                        } catch (IOException e) {
                            e.printStackTrace();
                            /**
                             * 有两种方法
                             * 1. 如果要提示用户,直接mhandler
                             * 2. 不提示用户
                             */
                            dismissLoading();
                            Toast.makeText(App.getContext(), "请检查您的手机存储空间,尝试重新下载", Toast.LENGTH_SHORT);
                        }
                    }
                });
    }



}
