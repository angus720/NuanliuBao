package nuanliu.com.modao.alipay;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.widget.Toast;

import com.alipay.sdk.app.PayTask;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class AlipayManager {

    private final Activity act;
    /**
     * 支付宝支付业务：入参app_id
     */
    public String APPID = "2088222881532935";
    /**
     * 支付监听
     */
    private OnPayListener onPayListener;
    private String orderInfo;

    public AlipayManager(Activity context, Map<String, String> map, OnPayListener listener) {
        act = context;
        orderInfo = map.get("orderString");
        onPayListener = listener;
        init();
    }

    public void init() {
        Runnable payRunnable = new Runnable() {

            @Override
            public void run() {
                Message msg = new Message();
                msg.obj = new PayTask(act).pay(orderInfo, true);
                mHandler.sendMessage(msg);
            }
        };

        Thread payThread = new Thread(payRunnable);
        payThread.start();
    }


    @SuppressLint("HandlerLeak")
    private Handler mHandler = new Handler() {
        @SuppressWarnings("unused")
        public void handleMessage(Message msg) {
            PayResult payResult = new PayResult((String) msg.obj);
            /**
             对于支付结果，请商户依赖服务端的异步通知结果。同步通知结果，仅作为支付结束的通知。
             */
            String resultInfo = payResult.getResult();// 同步返回需要验证的信息
            String resultStatus = payResult.getResultStatus();
            // 判断resultStatus 为9000则代表支付成功
            if (TextUtils.equals(resultStatus, "9000")) {
                // 该笔订单是否真实支付成功，需要依赖服务端的异步通知。
                Toast.makeText(act, "支付成功", Toast.LENGTH_SHORT).show();
                if (onPayListener != null) {
                    onPayListener.payCallback(true, resultStatus);
                }
            } else {
                // 该笔订单真实的支付结果，需要依赖服务端的异步通知。
                Toast.makeText(act, "支付失败", Toast.LENGTH_SHORT).show();
                if (onPayListener != null) {
                    onPayListener.payCallback(false, resultStatus);
                }
            }
        }
    };

    public interface OnPayListener {

        void payCallback(boolean success, String statusCode);
    }

    /**
     * 构造支付订单参数信息
     *
     * @param map 支付订单参数
     */
    public static String buildOrderParam(Map<String, String> map) {
        List<String> keys = new ArrayList<String>(map.keySet());

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < keys.size() - 1; i++) {
            String key = keys.get(i);
            String value = map.get(key);
            sb.append(buildKeyValue(key, value, true));
            sb.append("&");
        }

        String tailKey = keys.get(keys.size() - 1);
        String tailValue = map.get(tailKey);
        sb.append(buildKeyValue(tailKey, tailValue, true));

        return sb.toString();
    }

    /**
     * 拼接键值对
     */
    private static String buildKeyValue(String key, String value, boolean isEncode) {
        StringBuilder sb = new StringBuilder();
        sb.append(key);
        sb.append("=");
        if (isEncode) {
            try {
                sb.append(URLEncoder.encode(value, "UTF-8"));
            } catch (UnsupportedEncodingException e) {
                sb.append(value);
            }
        } else {
            sb.append(value);
        }
        return sb.toString();
    }
}
